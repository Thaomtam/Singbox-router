name: Release Build

permissions: write-all

on:
  push:
    tags:
      - "v*"           # K√≠ch ho·∫°t khi push tag b·∫Øt ƒë·∫ßu v·ªõi "v"
  workflow_dispatch:    # Cho ph√©p k√≠ch ho·∫°t th·ªß c√¥ng

jobs:
  cross:
    name: Cross-Platform Build
    strategy:
      matrix:
        include:
          # Android ARM64-v8a
          - name: android-arm64-v8a
            goos: android
            goarch: arm64
            android_abi: arm64-v8a  # ABI Android ch√≠nh x√°c

          # Linux AMD64
          - name: linux-amd64
            goos: linux
            goarch: amd64

          # Linux ARM64
          - name: linux-arm64
            goos: linux
            goarch: arm64

          # Linux MIPS (mipsel_24kc)
          - name: linux-mipsel
            goos: linux
            goarch: mipsle  # Little Endian (ph√π h·ª£p cho mipsel_24kc)

    fail-fast: false
    runs-on: ubuntu-latest
    env:
      CGO_ENABLED: 0
      TAGS: with_clash_api,with_quic,with_grpc,with_wireguard,with_reality_server,with_v2ray_api,with_utls,with_ech,with_gvisor,with_dhcp

    steps:
      # Checkout source code
      - name: Checkout Source Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # L·∫•y phi√™n b·∫£n Go m·ªõi nh·∫•t
      - name: Get Latest Go Version
        id: version
        run: |
          echo go_version=$(curl -s https://raw.githubusercontent.com/actions/go-versions/main/versions-manifest.json | grep -oE '"version": "[0-9]{1}.[0-9]{1,}(.[0-9]{1,})?"' | head -1 | cut -d':' -f2 | sed 's/ //g; s/"//g') >> $GITHUB_OUTPUT

      # Thi·∫øt l·∫≠p Go
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ steps.version.outputs.go_version }}

      # Build sing-box
      - name: Build sing-box
        id: build
        run: |
          echo "Building for GOARCH=${{ matrix.goarch }} GOOS=${{ matrix.goos }}"
          go build -tags "${{ env.TAGS }}" -o sing-box-${{ matrix.name }} ./cmd/sing-box

      # ƒê·ªïi t√™n v√† n√©n file binary
      - name: Rename and Compress Artifacts
        run: |
          ls -R
          artifact_name=sing-box-${{ matrix.name }}.zip
          7z a $artifact_name sing-box-${{ matrix.name }}
          echo "artifact_name=$artifact_name" >> $GITHUB_ENV

      # Upload artifacts
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.name }}
          path: ${{ env.artifact_name }}

  release:
    name: Create Release
    needs: cross
    runs-on: ubuntu-latest

    steps:
      # Checkout source code
      - name: Checkout Source Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # ƒê·∫∑t bi·∫øn m√¥i tr∆∞·ªùng cho t√™n v√† tag
      - name: Set Variables
        run: |
          TZ="Asia/Ho_Chi_Minh"
          RELEASE_NAME=$(TZ=$TZ date '+%d/%m/%Y %H:%M')
          TAG_NAME=$(TZ=$TZ date '+%Y%m%d%H%M')
          echo "RELEASE_NAME=${RELEASE_NAME}" >> $GITHUB_ENV
          echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV
        shell: bash

      # T·∫°o ghi ch√∫ ph√°t h√†nh
      - name: Create Release Notes
        run: |
          echo -e "üëâ Github: thaomtam\nüëâ Facebook: th·ªùi ti·∫øt\nüëâ Telegram: t.me/ktandroidreview\n\nüòçüòç Sing-Box core" > release-notes.txt

      # Ki·ªÉm tra n·∫øu release ƒë√£ t·ªìn t·∫°i
      - name: Check If Release Exists
        id: check_release
        run: |
          if gh release view ${{ env.TAG_NAME }}; then
            echo "RELEASE_EXISTS=true" >> $GITHUB_ENV
          else
            echo "RELEASE_EXISTS=false" >> $GITHUB_ENV
          fi

      # Download artifacts t·ª´ b∆∞·ªõc build
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts/

      # T·∫°o ho·∫∑c c·∫≠p nh·∫≠t Release
      - name: Create or Update Release
        run: |
          files=$(find ./artifacts -name "*.zip")
          if [ "${{ env.RELEASE_EXISTS }}" = "false" ]; then
            gh release create ${{ env.TAG_NAME }} \
              --generate-notes \
              --latest \
              --title "Build b·ªüi Th·ªùi Ti·∫øt - ${{ env.RELEASE_NAME }}" \
              --notes-file release-notes.txt \
              $files
          else
            gh release upload ${{ env.TAG_NAME }} \
              $files
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
